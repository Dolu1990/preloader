#!/usr/bin/env bash

# MIT License
#
# Copyright (c) 2022 Davidson Francis <davidsondfgl@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

ENVPREFIX="DAEM_"
LIBNAME="daem.so"
SCRIPT_NAME="$0"

# Paths
CURDIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
TMPDIR=${TMPDIR:="/tmp"}

start() {
	# lib should exist
	if [ ! -f "$CURDIR/$LIBNAME" ]; then
		make
	fi


	# Check if there are an instance already running
	if [ -z "$DAEM_PORT" ]; then
		PORT=3636
	else
		PORT=$DAEM_PORT
	fi

	pid_file="$TMPDIR/daem_$PORT.pid"

	# If there is a pid file
	if [ -r "$pid_file" ]; then

		# and the process still running
		pid="$(cat $pid_file)"
		if kill -s 0 $pid &> /dev/null; then
			echo "Error: There is a daemon running with pid $pid"   >&2
			echo "please kill it first or run in another port (-p)" >&2
			exit 1
		fi

	fi

	#
	# Obs:
	#
	LD_PRELOAD=$CURDIR/$LIBNAME "$1" {1..10}
}

stop() {
	echo "Stopped"
}

check_for_null() {
	if [ -z "$1" ]; then
		echo "Parameter ($1) should not be empty!"
		usage
	fi
}

check_for_integer() {
	case $1 in
		''|*[!0-9]*)
			echo "Parameter ($1) is not a number!"
			usage
			;;
	esac
}

usage() {
cat <<EOF >&2
Usage: $SCRIPT_NAME [options] <program-name-or-path>

Examples:
  $SCRIPT_NAME clang
  $SCRIPT_NAME -p 5050 --bind clang
  etc

Options:
  -p,--port             Specifies the port to be listening (default: 3636)
  -b,--bind-now         Performs immediate binding, i.e: uses LD_BIND_NOW
  -d,--daemonize        Daemonizes the server (disabled by default)
  -o,--log-file <file>  Enable logging and save to the <file>.
  -e,--log-stderr       Enable logging and outputs to stderr. Please note
                        that -l and -e are mutually exclusive. Also note
                        that when daemonized, logs to stderr will not work.
  -l,--log-level
  -h,--help             This help
EOF
	exit 1
}

ARGV=()

while [[ $# -gt 0 ]]; do
	case $1 in
		-p|--port)
			check_for_null    "$2"
			check_for_integer "$2"
			export DAEM_PORT="$2"
			shift
			shift
			;;
		-b|--bind-now)
			export LD_BIND_NOW="1"
			shift
			;;
		-d|--daemonize)
			export DAEM_DAEMONIZE="1"
			shift
			;;
		-h|--help)
			usage
			;;
		-*|--*)
			echo "Unknown option: $1" >&2
			usage
			;;
		*)
			ARGV+=("$1")
			shift
		;;
	esac
done

# Validate program name
if [ -z "${ARGV[0]}" ]; then
	echo "At least <program-name-or-path> is required!" >&2
	usage
else
	if ! command -v "${ARGV[0]}" &> /dev/null; then
		echo "Program (${ARGV[0]}) not found!" >&2
		usage
	fi
fi

# Run
start "${ARGV[0]}"
